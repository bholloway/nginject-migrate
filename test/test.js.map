{
  "version": 3,
  "sources": [
    "/Users/benholloway/Documents/WebstormProjects/angularity/angularity-todo-es5/todo/controller/todo-controller.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "/Users/benholloway/Documents/WebstormProjects/angularity/angularity-todo-es5/todo/controller/todo-controller.js",
  "sourcesContent": [
    "/**\n * <p>Controller for the to-do application.</p>\n * @ngInject\n */\nfunction TodoController($scope, $filter, $state, storage) {\n\n  // initialise scope\n  $scope.todos               = storage.get() || [];\n  $scope.newTodo             = '';\n  $scope.editedTodo          = undefined;\n  $scope.remainingCount      = 0;\n  $scope.completedCount      = 0;\n  $scope.allChecked          = false;\n  $scope.status              = null;\n  $scope.statusFilter        = null;\n  $scope.addTodo             = addTodo;\n  $scope.editTodo            = editTodo;\n  $scope.doneEditing         = doneEditing;\n  $scope.revertEditing       = revertEditing;\n  $scope.testEditing         = testEditing;\n  $scope.removeTodo          = removeTodo;\n  $scope.clearCompletedTodos = clearCompletedTodos;\n  $scope.markAll             = markAll;\n  $scope.watchTodos          = watchTodos;\n  $scope.onFilterChange      = onFilterChange;\n\n  // synchronise model with storage\n  $scope.$watch('todos', watchTodos, true);\n\n  // observe the current state for changes and adjust the filter\n  $scope.$on('$stateChangeSuccess', onFilterChange);\n\n  /**\n   * <p>Commit the to-do object currently assigned to <code>newTodo</code>.</p>\n   */\n  function addTodo() {\n    var text = $scope.newTodo.trim();\n    if (text.length) {\n      $scope.todos.push({\n        title: text, completed: false\n      });\n      $scope.newTodo = '';\n    }\n  }\n\n  /**\n   * <p>Mark the given to-do object as being edited.</p>\n   * <p>This will make it the <code>editedTodo</code> that may be reinstated on cancellation of editing.</p>\n   * @param {object} value The to-do object that is being edited\n   */\n  function editTodo(value) {\n    $scope.editedTodo = value;\n    $scope.originalTodo = angular.extend({}, value); // Clone the original to restore it on demand.\n  }\n\n  /**\n   * <p>Commit the to-do currently being edited.</p>\n   * <p>If the <code>title</code> is empty the value will be removed.</p>\n   * @param {object} value The to-do object that is being edited\n   */\n  function doneEditing(value) {\n    $scope.editedTodo = null;\n    value.title = value.title.trim();\n    if (!value.title) {\n      $scope.removeTodo(value);\n    }\n  }\n\n  /**\n   * <p>Cancel editing the given to-do and reinstate the pre-edit state.</p>\n   * @param {object} value The to-do object that is being edited\n   */\n  function revertEditing(value) {\n    var index = $scope.todos.indexOf(value);\n    $scope.todos[index] = $scope.originalTodo;\n    $scope.doneEditing($scope.originalTodo);\n  }\n\n  /**\n   * <p>Test whether the given to-do value is being edited.</p>\n   * @param {object} value The to-do object to query\n   * @returns {boolean} True where the given to-do is being edited\n   */\n  function testEditing(value) {\n    return ($scope.editedTodo === value);\n  }\n\n  /**\n   * <p>Remove the given to-do value from the collection.</p>\n   * @param {object} value The to-do object to remove\n   */\n  function removeTodo(value) {\n    $scope.todos.splice($scope.todos.indexOf(value), 1);\n  }\n\n  /**\n   * <p>Remove all to-do values that are marked as completed.</p>\n   */\n  function clearCompletedTodos() {\n    $scope.todos = $scope.todos.filter(function (val) {\n      return !val.completed;\n    });\n  }\n\n  /**\n   * <p>Mark all to-do values with the given completion value.</p>\n   * @param {boolean} completed The completed status to assign to all to-do values\n   */\n  function markAll(completed) {\n    $scope.todos.forEach(function (todo) {\n      todo.completed = !completed;\n    });\n  }\n\n  /**\n   * <p>Watch handler that commits the to-do list to storage when it changes.</p>\n   * @param {Array.<object>} newValue The new value of the list\n   * @param {Array.<object>} oldValue The previous value of the list\n   */\n  function watchTodos(newValue, oldValue) {\n    $scope.remainingCount = $filter('filter')($scope.todos, {completed: false}).length;\n    $scope.completedCount = $scope.todos.length - $scope.remainingCount;\n    $scope.allChecked     = !$scope.remainingCount;\n    if (newValue !== oldValue) {\n      storage.put($scope.todos);\n    }\n  }\n\n  /**\n   * <p>State change handler that implements a filter based on state parameters.</p>\n   */\n  function onFilterChange() {\n    switch ($state.params.status) {\n      case 'active':\n        $scope.status = 'active';\n        $scope.statusFilter = {completed: false};\n        break;\n      case 'completed':\n        $scope.status = 'completed';\n        $scope.statusFilter = {completed: true};\n        break;\n      default:\n        $scope.status = '';\n        $scope.statusFilter = {};\n        break;\n    }\n  }\n}\n\nmodule.exports = TodoController;"
  ]
}